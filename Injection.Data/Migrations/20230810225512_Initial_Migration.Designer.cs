// <auto-generated />
using System;
using Injection.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Injection.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20230810225512_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Injection.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("Decimal(5,2)")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("98dbdaa4-6c3f-47f4-b293-ee68ade2b102"),
                            CreatedAt = new DateTime(2023, 8, 10, 19, 55, 12, 260, DateTimeKind.Local).AddTicks(7271),
                            PersonId = new Guid("690d5eee-ef40-40a2-9be4-cd8610c2692c"),
                            ProductId = new Guid("6f8e9522-2693-4517-ab05-5814fef799f9"),
                            Qty = 1,
                            Total = 2m
                        });
                });

            modelBuilder.Entity("Injection.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("690d5eee-ef40-40a2-9be4-cd8610c2692c"),
                            CreatedAt = new DateTime(2023, 8, 10, 19, 55, 12, 260, DateTimeKind.Local).AddTicks(6768),
                            Email = "person1@api.com",
                            IsAdmin = true,
                            Name = "Person 1"
                        },
                        new
                        {
                            Id = new Guid("ceb0b506-a565-4c9f-9f92-ed08b949f23b"),
                            CreatedAt = new DateTime(2023, 8, 10, 19, 55, 12, 260, DateTimeKind.Local).AddTicks(6824),
                            Email = "person2@api.com",
                            IsAdmin = false,
                            Name = "Person 2"
                        });
                });

            modelBuilder.Entity("Injection.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(5,2)")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f8e9522-2693-4517-ab05-5814fef799f9"),
                            CreatedAt = new DateTime(2023, 8, 10, 19, 55, 12, 260, DateTimeKind.Local).AddTicks(7218),
                            Name = "Product 1",
                            Price = 2m
                        },
                        new
                        {
                            Id = new Guid("36b119c3-55fa-42fc-948d-f7f314cbda60"),
                            CreatedAt = new DateTime(2023, 8, 10, 19, 55, 12, 260, DateTimeKind.Local).AddTicks(7223),
                            Name = "Product 2",
                            Price = 5m
                        });
                });

            modelBuilder.Entity("Injection.Entities.Order", b =>
                {
                    b.HasOne("Injection.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Injection.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
